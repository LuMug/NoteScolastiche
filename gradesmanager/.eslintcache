[{"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\index.tsx":"1","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\reportWebVitals.ts":"2","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\App.tsx":"3","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\auth\\Auth.ts":"4","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\util\\constants.ts":"5","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\protected-route\\ProtectedRoute.tsx":"6","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\AuthorsPage\\AuthorsPage.tsx":"7","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\LoginPage\\LoginPage.tsx":"8","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\TeacherPage\\TeacherPage.tsx":"9","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\HomePage\\HomePage.tsx":"10","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\AdminPage\\AdminPage.tsx":"11","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\@types\\index.ts":"12","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\helpers\\FetchHelper.ts":"13","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\helpers\\ArrayHelper.ts":"14","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\helpers\\GradeHelper.ts":"15","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\text-input\\TextInput.tsx":"16","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\author-box\\AuthorBox.tsx":"17","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\gradient-button\\GradientButton.tsx":"18","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\LoadingPage\\LoadingPage.tsx":"19","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\welcome-component\\WelcomeComponent.tsx":"20","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\slider\\Slider.tsx":"21","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\Page\\Page.tsx":"22","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\AdminPage\\ParamSwitcher.tsx":"23","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\avg-chart\\AvgChart.tsx":"24","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\grade-prompt\\GradePrompt.tsx":"25","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\add-subject\\AddSubject.tsx":"26","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\circular-fade-border\\CircularFadeBorder.tsx":"27","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\search-bar\\SearchBar.tsx":"28","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\teacher-infobox\\TeacherInfobox.tsx":"29","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\trend-chart\\TrendChart.tsx":"30","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\subject\\Subject.tsx":"31","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\SubjectPage\\SubjectPage.tsx":"32","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\welcome-prompt\\WelcomePrompt.tsx":"33","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\helpers\\ObjectHelper.ts":"34","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\nav\\Nav.tsx":"35","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\chart\\AbstractChart.tsx":"36","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\subject\\Grade.tsx":"37","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\simple-text-input\\SimpleTextInput.tsx":"38","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\add-grade-btn\\AddGradeButton.tsx":"39","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\grade-options\\GradeOptions.tsx":"40","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\prompt\\Prompt.tsx":"41"},{"size":517,"mtime":1618757180000,"results":"42","hashOfConfig":"43"},{"size":440,"mtime":1618468716000,"results":"44","hashOfConfig":"43"},{"size":2091,"mtime":1619375924000,"results":"45","hashOfConfig":"43"},{"size":2903,"mtime":1620292860000,"results":"46","hashOfConfig":"43"},{"size":557,"mtime":1619375872000,"results":"47","hashOfConfig":"43"},{"size":484,"mtime":1618685256000,"results":"48","hashOfConfig":"43"},{"size":5017,"mtime":1619375920000,"results":"49","hashOfConfig":"43"},{"size":4498,"mtime":1620288396000,"results":"50","hashOfConfig":"43"},{"size":6656,"mtime":1619375922000,"results":"51","hashOfConfig":"43"},{"size":13406,"mtime":1620297980000,"results":"52","hashOfConfig":"43"},{"size":4916,"mtime":1619376078000,"results":"53","hashOfConfig":"43"},{"size":2645,"mtime":1620287120000,"results":"54","hashOfConfig":"43"},{"size":9614,"mtime":1619375900000,"results":"55","hashOfConfig":"43"},{"size":1576,"mtime":1618749504000,"results":"56","hashOfConfig":"43"},{"size":3367,"mtime":1620300742000,"results":"57","hashOfConfig":"43"},{"size":966,"mtime":1620292846000,"results":"58","hashOfConfig":"43"},{"size":2543,"mtime":1618741838000,"results":"59","hashOfConfig":"43"},{"size":741,"mtime":1620285790000,"results":"60","hashOfConfig":"43"},{"size":678,"mtime":1618632328000,"results":"61","hashOfConfig":"43"},{"size":2008,"mtime":1619082338000,"results":"62","hashOfConfig":"43"},{"size":600,"mtime":1618741566000,"results":"63","hashOfConfig":"43"},{"size":1460,"mtime":1620283702000,"results":"64","hashOfConfig":"43"},{"size":872,"mtime":1618506210000,"results":"65","hashOfConfig":"43"},{"size":877,"mtime":1618759158000,"results":"66","hashOfConfig":"43"},{"size":3540,"mtime":1619375930000,"results":"67","hashOfConfig":"43"},{"size":377,"mtime":1618632402000,"results":"68","hashOfConfig":"43"},{"size":594,"mtime":1618741650000,"results":"69","hashOfConfig":"43"},{"size":910,"mtime":1618854586000,"results":"70","hashOfConfig":"43"},{"size":2547,"mtime":1619375916000,"results":"71","hashOfConfig":"43"},{"size":1034,"mtime":1618759170000,"results":"72","hashOfConfig":"43"},{"size":7307,"mtime":1620301076000,"results":"73","hashOfConfig":"43"},{"size":8435,"mtime":1620301324000,"results":"74","hashOfConfig":"43"},{"size":529,"mtime":1619377120000,"results":"75","hashOfConfig":"43"},{"size":79,"mtime":1618741018000,"results":"76","hashOfConfig":"43"},{"size":1774,"mtime":1619375910000,"results":"77","hashOfConfig":"43"},{"size":2033,"mtime":1618759146000,"results":"78","hashOfConfig":"43"},{"size":574,"mtime":1620299826000,"results":"79","hashOfConfig":"43"},{"size":2983,"mtime":1618632858000,"results":"80","hashOfConfig":"43"},{"size":435,"mtime":1618632370000,"results":"81","hashOfConfig":"43"},{"size":710,"mtime":1618858134000,"results":"82","hashOfConfig":"43"},{"size":710,"mtime":1619376868000,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"im1thp",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"86"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"86"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\index.tsx",[],["183","184"],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\reportWebVitals.ts",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\App.tsx",["185","186","187","188","189","190"],"import AdminPage from './components/AdminPage/AdminPage';\r\nimport Auth from './auth/Auth';\r\nimport AuthorsPage from './components/AuthorsPage/AuthorsPage';\r\nimport HomePage from './components/HomePage/HomePage';\r\nimport LoginPage from './components/LoginPage/LoginPage';\r\nimport ProtectedRoute from './components/protected-route/ProtectedRoute';\r\nimport TeacherPage from './components/TeacherPage/TeacherPage';\r\nimport {\r\n  ABOUT_ROUTE,\r\n  ADMIN_ROUTE,\r\n  HOME_ROUTE,\r\n  TEACHERS_ROUTE\r\n  } from './util/constants';\r\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\r\nimport { Component } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { UserType } from './@types';\r\n\r\nexport default class App extends Component<{}> {\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    let uid = (Auth.getUserUid() == null) ? -1 : Auth.getUserUid() as number;\r\n\r\n    return (\r\n      <div>\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route exact path=\"/login\">\r\n              <LoginPage />\r\n            </Route>\r\n            {/* <ProtectedRoute exact path={TEACHERS_ROUTE} render={() => <TeacherPage tuid={uid} />} /> */}\r\n            {/* <ProtectedRoute exact path={ADMIN_ROUTE} render={() => <AdminPage uuid={Auth.getUserUid()} />} /> */}\r\n            <ProtectedRoute exact path={ABOUT_ROUTE} render={() => <AuthorsPage uuid={Auth.getUserUid()} />} />\r\n            <ProtectedRoute exact path={HOME_ROUTE} render={() => {\r\n              if (Auth.getUserType() == UserType.STUDENT) {\r\n                return <HomePage uuid={Auth.getUserUid()} />\r\n              } else if (Auth.getUserType() == UserType.ADMIN) {\r\n                return <AdminPage uuid={Auth.getUserUid()} />\r\n              } else if (Auth.getUserType() == UserType.TEACHER) {\r\n                return <TeacherPage tuid={uid} />\r\n              }\r\n              return <HomePage uuid={Auth.getUserUid()} />\r\n            }} />\r\n            {/* Handles 404 */}\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\auth\\Auth.ts",["191","192"],"import FetchHelper from '../helpers/FetchHelper';\r\nimport internals from './internals.json';\r\nimport { IError, IUser, UserType } from '../@types';\r\n\r\nclass Auth {\r\n\r\n    public async login(username: string, password: string) {\r\n        let ok: IUser | null = null;\r\n        try {\r\n            ok = await FetchHelper.login(username, password);\r\n        } catch (err) {\r\n            let internal: IUser | null = await this.getInternalAccount(username, password);\r\n            if (internal) {\r\n                sessionStorage.setItem('logged', 'true');\r\n                sessionStorage.setItem('uid', internal.uid.toString());\r\n                sessionStorage.setItem('user_type', internal.type);\r\n                return internal;\r\n            }\r\n            throw err;\r\n        }\r\n        if (ok && ok.uid) {\r\n            sessionStorage.setItem('logged', 'true');\r\n            sessionStorage.setItem('uid', ok.uid.toString());\r\n            sessionStorage.setItem('user_type', ok.type);\r\n            return ok;\r\n        } else {\r\n            sessionStorage.setItem('logged', 'false');\r\n            sessionStorage.removeItem('uid');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public logout() {\r\n        sessionStorage.removeItem('logged');\r\n        sessionStorage.removeItem('uid');\r\n        sessionStorage.removeItem('user_type');\r\n    }\r\n\r\n    public isLoggedIn(): boolean {\r\n        return (sessionStorage.getItem('logged') == 'true');\r\n    }\r\n\r\n    public getUserUid(): number | null {\r\n        let uid = sessionStorage.getItem('uid');\r\n        return (uid) ? parseInt(uid) : null;\r\n    }\r\n\r\n    public getUserType(): UserType | null {\r\n        let entry = sessionStorage.getItem('user_type');\r\n        return (entry) ? entry as UserType : null;\r\n    }\r\n\r\n    public setUserType(type: UserType) {\r\n        sessionStorage.setItem('user_type', type.toString());\r\n    }\r\n\r\n    // public getUserTheme(): 'blue_theme' | 'purple_theme' | null {\r\n    //     return sessionStorage.getItem('theme') as 'blue_theme' | 'purple_theme' | null;\r\n    // }\r\n\r\n    private async getInternalAccount(username: string, password: string) {\r\n        for (const acc of internals) {\r\n            if (acc.username === username && acc.password === password) {\r\n                let uid: number | null = null;\r\n                try {\r\n                    uid = await FetchHelper.fetchUserUid(username);\r\n                    let user: IUser | null = null;\r\n                    if (uid) {\r\n                        user = await FetchHelper.fetchUser(uid);\r\n                    }\r\n                    if (!uid || !user) {\r\n                        return null;\r\n                    }\r\n                    return user;\r\n                } catch (err) {\r\n                    console.error(err);\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default new Auth();","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\util\\constants.ts",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\protected-route\\ProtectedRoute.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\AuthorsPage\\AuthorsPage.tsx",["193"],"import arisProfPic from './../../public/img/aris.jpg';\r\nimport AuthorBox from '../author-box/AuthorBox';\r\nimport discordlogo from './../../public/img/discordlogo.png';\r\nimport FetchHelper from '../../helpers/FetchHelper';\r\nimport franciscoProfPic from './../../public/img/francisco.jpg';\r\nimport githublogo from './../../public/img/gitlogo_light.png';\r\nimport iglogo from './../../public/img/iglogo.png';\r\nimport ismaelProfPic from './../../public/img/ismael.jpg';\r\nimport nicolaProfPic from './../../public/img/nicola.jpg';\r\nimport Page from '../Page/Page';\r\nimport { IUser } from '../../@types';\r\nimport { shuffle } from './../../helpers/ArrayHelper';\r\nimport { useEffect, useState } from 'react';\r\nimport './authors-page.css';\r\n\r\n\r\ninterface IAuthorsPageProps {\r\n\r\n    uuid: number | null;\r\n}\r\n\r\nconst AuthorsPage: React.FunctionComponent<IAuthorsPageProps> = (props) => {\r\n    const [user, setUser] = useState<IUser | null>(null);\r\n    const [panels, setPanels] = useState<JSX.Element[]>([\r\n        <AuthorBox\r\n            igUserName=\"nicolaambrosetti\"\r\n            name=\"Nicola Ambrosetti\"\r\n            body=\"\"\r\n            imageUrl={nicolaProfPic}\r\n            socials={[\r\n                {\r\n                    name: 'Instagram',\r\n                    url: 'https://www.instagram.com/nicolaambrosetti/',\r\n                    imageUrl: iglogo\r\n                },\r\n                {\r\n                    name: 'Github',\r\n                    url: 'https://github.com/nicolaambrosetti',\r\n                    imageUrl: githublogo\r\n                },\r\n                {\r\n                    name: 'Discord',\r\n                    url: 'https://discordapp.com/users/535506347941429248',\r\n                    imageUrl: discordlogo\r\n                }\r\n            ]}\r\n        />,\r\n        <AuthorBox\r\n            igUserName=\"aris.prvtli\"\r\n            name=\"Aris Previtali\"\r\n            body=\"\"\r\n            imageUrl={arisProfPic}\r\n            socials={[\r\n                {\r\n                    name: 'Instagram',\r\n                    url: 'https://www.instagram.com/aris.prvtli/',\r\n                    imageUrl: iglogo\r\n                },\r\n                {\r\n                    name: 'Github',\r\n                    url: 'https://github.com/ArisPrevitali',\r\n                    imageUrl: githublogo\r\n                },\r\n                {\r\n                    name: 'Discord',\r\n                    url: 'https://discordapp.com/users/265477698682486794',\r\n                    imageUrl: discordlogo\r\n                }\r\n            ]}\r\n        />,\r\n        <AuthorBox\r\n            igUserName=\"iismapriisma\"\r\n            name=\"Ismael Trentin\"\r\n            body=\"\"\r\n            imageUrl={ismaelProfPic}\r\n            socials={[\r\n                {\r\n                    name: 'Instagram',\r\n                    url: 'https://www.instagram.com/iismapriisma/',\r\n                    imageUrl: iglogo\r\n                },\r\n                {\r\n                    name: 'Github',\r\n                    url: 'https://github.com/IsmaelTrentin',\r\n                    imageUrl: githublogo\r\n                },\r\n                {\r\n                    name: 'Discord',\r\n                    url: 'https://discordapp.com/users/319445704969814016',\r\n                    imageUrl: discordlogo\r\n                }\r\n            ]}\r\n        />,\r\n        <AuthorBox\r\n            igUserName=\"v.fraah\"\r\n            name=\"Francisco Viola\"\r\n            body=\"\"\r\n            imageUrl={franciscoProfPic}\r\n            socials={[\r\n                {\r\n                    name: 'Instagram',\r\n                    url: 'https://www.instagram.com/v.fraah/',\r\n                    imageUrl: iglogo\r\n                },\r\n                {\r\n                    name: 'Github',\r\n                    url: 'https://github.com/franciscoviola',\r\n                    imageUrl: githublogo\r\n                },\r\n                {\r\n                    name: 'Discord',\r\n                    url: 'https://discordapp.com/users/272760422736723968',\r\n                    imageUrl: discordlogo\r\n                }\r\n            ]}\r\n        />\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            let user;\r\n            try {\r\n                user = await FetchHelper.fetchUser(props.uuid || -1);\r\n            } catch (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            setUser(user);\r\n        };\r\n        fetch();\r\n        setPanels(shuffle(panels));\r\n    }, [])\r\n\r\n    return (\r\n        <Page\r\n            user={user}\r\n            displayPrompt={false}>\r\n            <div className=\"aup-main-content\" >\r\n                {panels.map((p, i) => {\r\n                    return (\r\n                        <div\r\n                            className=\"aup-author-panel\"\r\n                            key={i}\r\n                        >\r\n                            {p}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </Page>\r\n    );\r\n}\r\nexport default AuthorsPage;","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\LoginPage\\LoginPage.tsx",["194","195"],"import Auth from '../../auth/Auth';\r\nimport GradientButton from '../gradient-button/GradientButton';\r\nimport LoadingPage from '../LoadingPage/LoadingPage';\r\nimport React, { useState } from 'react';\r\nimport TextInput from '../text-input/TextInput';\r\nimport { IUser } from '../../@types';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './LoginPage.css';\r\n\r\ninterface ILoginPageProps {\r\n\r\n  onLoginSuccess?: (uuid: number) => void;\r\n}\r\n\r\nconst LoginPage = (props: ILoginPageProps) => {\r\n  const [username, setUsername] = useState('');\r\n  const [pw, setPw] = useState('');\r\n  const [showError, setShowError] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const attemptLogin = async () => {\r\n    setShowError(false);\r\n    setError('');\r\n    if (username.trim() === '' || pw.trim() === '') {\r\n      setShowError(true);\r\n      setError('Riempi tutti i campi');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    let user: IUser | null = null;\r\n    try {\r\n      user = await Auth.login(username, pw);\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setShowError(true);\r\n      let errMsg = err.error?.message.includes('incorrect')\r\n        ? 'Nome utente o password errati'\r\n        : err.error?.message.includes('valid username')\r\n          ? 'Nome utente invalido'\r\n          : err.error?.message || 'Internal error';\r\n      setError(errMsg);\r\n      return;\r\n    }\r\n    if (user) {\r\n      if (props.onLoginSuccess) {\r\n        props.onLoginSuccess(user.uid);\r\n      }\r\n      history.push('/');\r\n    } else {\r\n      setShowError(true);\r\n      setError('Username o password invalidi');\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  const onKeyPressed = (key: string) => {\r\n    if (key == 'Enter') {\r\n      attemptLogin();\r\n    }\r\n  }\r\n\r\n  let loader = loading\r\n    ? <div className=\"lp-loading-icon\"></div>\r\n    : null;\r\n\r\n  let errWrapper = showError\r\n    ? <div className=\"lp-left-error-wrapper\">\r\n      <p className=\"lp-left-error\">{error}</p>\r\n    </div>\r\n    : null;\r\n\r\n  return (\r\n    <div className=\"lp-page\">\r\n      <div className=\"lp-main-content intro\">\r\n        <div className=\"lp-left-section\">\r\n          <div className=\"lp-left-top\">\r\n            <div className=\"lp-left-title\">\r\n              <h1>Login</h1>\r\n            </div>\r\n          </div>\r\n          <div className=\"lp-left-bottom\">\r\n            <TextInput\r\n              inputType=\"text\"\r\n              placeHolder=\"Username\"\r\n              toolTipText=\"Inserisci il nome utente della scuola\"\r\n              onChange={(text) => setUsername(text)}\r\n              onKeyPress={key => onKeyPressed(key)} />\r\n            <TextInput\r\n              inputType=\"password\"\r\n              placeHolder=\"Password\"\r\n              toolTipText=\"Inserisci la password di scuola\"\r\n              onChange={(text) => setPw(text)}\r\n              onKeyPress={key => onKeyPressed(key)} />\r\n            {errWrapper}\r\n          </div>\r\n          <div className=\"lp-left-botbot\">\r\n            {!loading\r\n              ? <GradientButton message=\"Login\" onClick={() => attemptLogin()} />\r\n              : loader}\r\n          </div>\r\n        </div>\r\n        <div className=\"lp-right-section\">\r\n          <div className=\"lp-right-title\">\r\n            <h1>Come fare?</h1>\r\n          </div>\r\n          <div className=\"lp-right-content\">\r\n            <div className=\"lp-le\">\r\n              <p className=\"lp-le-bullet\">•</p>\r\n              <div className=\"lp-le-content\">Utilizza l'account di scuola:</div>\r\n            </div>\r\n            <div className=\"lp-le\">\r\n              <p className=\"lp-le-bullet\">•</p>\r\n              <div className=\"lp-le-content\">\r\n                <span className=\"lp-le-content-lowa\">nome.cognome</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"lp-le\">\r\n              <p className=\"lp-le-bullet\">•</p>\r\n              <div className=\"lp-le-content\">\r\n                <span className=\"lp-le-content-lowa\">La tua password</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"lp-le\">\r\n              <p className=\"lp-le-bullet\">•</p>\r\n              <div className=\"lp-le-content\">\r\n                <span className=\"lp-le-content-lowa\">Clicca su </span>Login\r\n            </div>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            {/* <AboutButton /> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\TeacherPage\\TeacherPage.tsx",["196","197","198"],"import FetchHelper from '../../helpers/FetchHelper';\r\nimport LoadingPage from '../LoadingPage/LoadingPage';\r\nimport Page from '../Page/Page';\r\nimport Slider from '../slider/Slider';\r\nimport WelcomeComponent from '../welcome-component/WelcomeComponent';\r\nimport {\r\n  IGroup,\r\n  ITeacher,\r\n  IUser,\r\n  UserType\r\n  } from '../../@types';\r\nimport { Redirect } from 'react-router';\r\nimport { useEffect, useState } from 'react';\r\nimport './TeacherPage.css';\r\n\r\ninterface ITeacherPageProps {\r\n\r\n  tuid: number;\r\n}\r\n\r\nconst TeacherPage = (props: ITeacherPageProps) => {\r\n  const [teacher, setTeacher] = useState<ITeacher | null>(null);\r\n  const [mode, toggleMode] = useState(false);\r\n  const [groups, setGroups] = useState<IGroup[] | null>(null);\r\n  const [groupNames, setGroupNames] = useState<string[]>([]);\r\n  const [students, setStudents] = useState<IUser[]>([]);\r\n  const [currentCtx, setCurrentCtx] = useState<IGroup | number | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        let _teacher = await FetchHelper.fetchTeacher(props.tuid);\r\n        let _groups = await FetchHelper.fetchGroupsFor(props.tuid);\r\n        setTeacher(() => _teacher);\r\n        setGroups(() => _groups);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(err);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n    };\r\n    fetch();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!currentCtx) {\r\n      return;\r\n    }\r\n    const fetch = async () => {\r\n      try {\r\n        setLoading(true);\r\n        let sts = await FetchHelper.fetchGroupStudents(\r\n          (typeof currentCtx == 'number')\r\n            ? currentCtx\r\n            : currentCtx.uid);\r\n        setStudents(() => sts);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(err);\r\n        return;\r\n      }\r\n    };\r\n    fetch();\r\n  }, [currentCtx])\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      if (mode && teacher) {\r\n        try {\r\n          let sts = await FetchHelper.fetchTeacherStudents(teacher);\r\n          setStudents(() => sts);\r\n        } catch (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    fetch();\r\n  }, [mode]);\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      if (mode) {\r\n        let names: string[] = []\r\n        for (let i = 0; i < students.length; i++) {\r\n          names.push((await FetchHelper.fetchGroup(students[i].groupId)).name);\r\n        }\r\n        setGroupNames(() => names);\r\n      }\r\n    }\r\n    fetch();\r\n  }, [students])\r\n\r\n  if (!groups || !teacher) {\r\n    return (\r\n      <Page displayPrompt={false} user={null}>\r\n        <LoadingPage />\r\n      </Page>\r\n    );\r\n  }\r\n\r\n  if (!teacher && !loading) {\r\n    return <Redirect to=\"/\" />\r\n  }\r\n\r\n  let modeTableContent;\r\n  if (!mode && groups) {\r\n    modeTableContent =\r\n      <table className=\"tp-table\">\r\n        <tr className=\"tp-tr\">\r\n          <th className=\"tp-th\">Classi</th>\r\n        </tr>\r\n        {groups.map((g, i) => {\r\n          let cname = (g === currentCtx) ? 'tp-tr tp-tr-current' : 'tp-tr';\r\n          return (\r\n            <tr className={cname} key={i} onClick={() => {\r\n              if (!currentCtx || (currentCtx as IGroup).uid !== g.uid) {\r\n                setStudents(() => []);\r\n                setCurrentCtx(() => g);\r\n              }\r\n            }}>\r\n              <td className=\"tp-td\">{g.name}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </table>;\r\n  }\r\n\r\n  let teacherAsUser: IUser = {\r\n    groupId: -1,\r\n    name: teacher.name,\r\n    subjects: [],\r\n    surname: teacher.surname,\r\n    type: UserType.TEACHER,\r\n    uid: teacher.uid\r\n  }\r\n\r\n  let groupsTables;\r\n  let studentsTable;\r\n\r\n  if (!mode) {\r\n    let studentsBody;\r\n    if (students.length > 0) {\r\n      studentsBody = students.map((s, i) => {\r\n        return <tr className=\"tp-tr\" key={i}>\r\n          <td className=\"tp-td\">{s.name}</td>\r\n          <td className=\"tp-td\">{s.surname}</td>\r\n          <td className=\"tp-td\">{s.uid}</td>\r\n        </tr>;\r\n      });\r\n    } else {\r\n      if (currentCtx && loading) {\r\n        studentsBody = <tr className=\"tp-tr\">\r\n          <td className=\"tp-td tp-td-loading\" colSpan={3}></td>\r\n        </tr>;\r\n      } else if (currentCtx && !loading) {\r\n        studentsBody = <tr className=\"tp-tr\">\r\n          <td className=\"tp-td tp-td-nodata\" colSpan={3}>Nessun allievo di questa classe si e' ancora registrato</td>\r\n        </tr>;\r\n      }\r\n    }\r\n    studentsTable = null;\r\n    groupsTables = <div className=\"tp-tables-wrapper\">\r\n      <div className=\"tp-table-wrapper\">{modeTableContent}</div>\r\n      <div className=\"tp-table-wrapper\">\r\n        <table className=\"tp-table\">\r\n          <tr className=\"tp-tr\">\r\n            <th className=\"tp-th\">Nome</th>\r\n            <th className=\"tp-th\">Cognome</th>\r\n            <th className=\"tp-th\">ID</th>\r\n          </tr>\r\n          {studentsBody}\r\n        </table>\r\n      </div>\r\n    </div>;\r\n  } else if (mode) {\r\n    let studentsBody;\r\n    if (students.length > 0) {\r\n      studentsBody = students.map((s, i) => {\r\n        return <tr className=\"tp-tr\" key={i}>\r\n          <td className=\"tp-td\">{s.name}</td>\r\n          <td className=\"tp-td\">{s.surname}</td>\r\n          <td className=\"tp-td\">{groupNames[i]}</td>\r\n          <td className=\"tp-td\">{s.uid}</td>\r\n        </tr>;\r\n      });\r\n    } else {\r\n      studentsBody = <tr className=\"tp-tr\">\r\n        <td className=\"tp-td-loading\" colSpan={4} ></td>\r\n      </tr>;\r\n    }\r\n    groupsTables = null;\r\n    studentsTable = <div className=\"tp-tables-wrapper\">\r\n      <div className=\"tp-table-wrapper\">\r\n        <table className=\"tp-table\">\r\n          <tr className=\"tp-tr\">\r\n            <th className=\"tp-th\">Nome</th>\r\n            <th className=\"tp-th\">Cognome</th>\r\n            <th className=\"tp-th\">Classe</th>\r\n            <th className=\"tp-th\">ID</th>\r\n          </tr>\r\n          {studentsBody}\r\n        </table>\r\n      </div>\r\n    </div>;\r\n  }\r\n\r\n  return (\r\n    <Page displayPrompt={false} user={teacherAsUser}>\r\n      <div className=\"tp-main-content\" >\r\n        <WelcomeComponent name={teacher.name} />\r\n        <div className=\"tp-modes-wrapper\">\r\n          <p className=\"tp-mode\">Classi</p>\r\n          <div className=\"tp-slider\">\r\n            <Slider onChangeState={() => {\r\n              setStudents(() => []);\r\n              setCurrentCtx(() => null);\r\n              toggleMode(ps => !ps);\r\n            }} />\r\n          </div>\r\n          <p className=\"tp-mode\">Studenti</p>\r\n        </div>\r\n        {groupsTables}\r\n        {studentsTable}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default TeacherPage;\r\n","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\HomePage\\HomePage.tsx",["199","200","201","202","203","204","205","206"],"import AddSubject from '../add-subject/AddSubject';\r\nimport AvgChart from '../avg-chart/AvgChart';\r\nimport CircularFadeBorder from '../circular-fade-border/CircularFadeBorder';\r\nimport FetchHelper from '../../helpers/FetchHelper';\r\nimport GradeHelper from '../../helpers/GradeHelper';\r\nimport GradePrompt from '../grade-prompt/GradePrompt';\r\nimport LoadingPage from '../LoadingPage/LoadingPage';\r\nimport Page from '../Page/Page';\r\nimport Prompt from '../prompt/Prompt';\r\nimport React, { useEffect, useState } from 'react';\r\nimport SearchBar from '../search-bar/SearchBar';\r\nimport Subject from '../subject/Subject';\r\nimport SubjectPage from '../SubjectPage/SubjectPage';\r\nimport TeacherInfobox from '../teacher-infobox/TeacherInfobox';\r\nimport TrendChart from '../trend-chart/TrendChart';\r\nimport WelcomeComponent from '../welcome-component/WelcomeComponent';\r\nimport WelcomePrompt from '../welcome-prompt/WelcomePrompt';\r\nimport {\r\n  IGrade,\r\n  ITeacher,\r\n  IUser,\r\n  IUserSubject\r\n  } from '../../@types';\r\nimport { toast } from 'react-toastify';\r\nimport './home-page.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\ninterface IHomePageProps {\r\n\r\n  uuid: number | null;\r\n}\r\n\r\n// toast.configure();\r\n\r\nlet deleteLastUS = true;\r\n\r\nconst HomePage: React.FunctionComponent<IHomePageProps> = (props) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [unavailable, setUnavailable] = useState(false);\r\n  const [user, setUser] = useState<IUser | null>(null);\r\n  const [displayDetails, setDisplayDetails] = useState(false);\r\n  const [displayGradePrompt, setDisplayGradePrompt] = useState(false);\r\n  const [displayTIB, setDisplayTIB] = useState(false);\r\n  const [displayMessage, setDisplayMessage] = useState(false);\r\n  const [currentSubject, setCurrentSubject] = useState<IUserSubject | null>(null);\r\n  const [teachersCache, setTeachersCache] = useState<ITeacher[]>([]);\r\n  const [query, setQuery] = useState<string>('');\r\n  const [subjects, setSubjects] = useState<IUserSubject[]>([]);\r\n  const [shouldUpdateCharts, setShouldUpdateCharts] = useState(false);\r\n  const dispPrompt = displayDetails || displayGradePrompt || displayTIB || displayMessage;\r\n\r\n  const updateUser = async (user: IUser, updateCharts?: boolean) => {\r\n    setUser(user);\r\n    setShouldUpdateCharts(updateCharts === undefined ? true : updateCharts);\r\n    try {\r\n      await FetchHelper.patchUser(user.uid, user);\r\n    } catch (err) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  const onGradePromptSubmit = async (value: number, weight: number, date: Date) => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n    // Will be casted with no error because currentSubject will\r\n    // never be null since onGradePromptSubmit is called by\r\n    // interacting with a subject. Therefore a subject must exist.\r\n    let index = user.subjects.indexOf(currentSubject as IUserSubject);\r\n    const newGrade: IGrade = {\r\n      value: value,\r\n      weight: weight,\r\n      date: date.toISOString()\r\n    }\r\n    try {\r\n      await FetchHelper.postSubjectGrade(user.uid, index, newGrade);\r\n    } catch (err) {\r\n      return;\r\n    }\r\n    let updated = { ...user };\r\n    updated.subjects[index].grades.push(newGrade);\r\n    updateUser(updated);\r\n  }\r\n\r\n  const onSubjectRemoveGrade = async (sIndex: number, gIndex: number) => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n    let updated;\r\n    try {\r\n      await FetchHelper.deleteSubjectGrade(user.uid, sIndex, gIndex);\r\n      updated = await FetchHelper.fetchUser(user.uid);\r\n    } catch (err) {\r\n      console.error(err);\r\n      return;\r\n    }\r\n    updateUser(updated)\r\n    setCurrentSubject(updated.subjects[sIndex]);\r\n  }\r\n\r\n  const onSPRemoveGrade = async (grade: IGrade, gIndex: number) => {\r\n    if (!currentSubject || !user) {\r\n      return;\r\n    }\r\n    // FIX UPDATE\r\n    let sIndex = user.subjects.indexOf(currentSubject as IUserSubject);\r\n    await onSubjectRemoveGrade(sIndex, gIndex);\r\n  }\r\n\r\n  const onSPEditGrade = async (grade: IGrade, sIndex: number, gIndex: number) => {\r\n    if (!currentSubject || !user || sIndex == -1 || gIndex == -1) {\r\n      return;\r\n    }\r\n    try {\r\n      await FetchHelper.patchSubjectGrade(user.uid, sIndex, gIndex, grade);\r\n      let u = await FetchHelper.fetchUser(user.uid);\r\n      setUser(u);\r\n      setCurrentSubject(u.subjects[sIndex]);\r\n      setShouldUpdateCharts(true);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  const onTIBTeacherClick = async (teacher: ITeacher) => {\r\n    if (!user || !currentSubject) {\r\n      return;\r\n    }\r\n    let sIndex = user.subjects.indexOf(currentSubject);\r\n    let data = { ...currentSubject };//Object.assign({}, currentSubject);\r\n    data.teacherId = teacher.uid;\r\n    data.teacherName = `${teacher.surname} ${teacher.name}`;\r\n    try {\r\n      await FetchHelper.patchUserSubject(user.uid, sIndex, data);\r\n      setDisplayTIB(false);\r\n      updateUser(await FetchHelper.fetchUser(user.uid));\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  const onListSubjectClick = async (us: IUserSubject, index?: number) => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n    let userSub = (!us && index) ? user.subjects[index] : us;\r\n    setDisplayDetails(true)\r\n    setCurrentSubject(userSub);\r\n  }\r\n\r\n  const onChartUpdate = () => {\r\n    setShouldUpdateCharts(false);\r\n  }\r\n\r\n  const onSubjectDelete = async (index: number) => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n    // toast.dark(`Delete ${user.subjects[index].name}?`, {\r\n    //   position: 'bottom-right',\r\n    //   onClick: () => {\r\n    //     deleteLastUS = false;\r\n    //   },\r\n    //   onClose: () => {\r\n    //     if (deleteLastUS) {\r\n    // let updated = { ...user };\r\n    // updated.subjects.splice(index, 1);\r\n    // updateUser(updated);\r\n    //     }\r\n    //     deleteLastUS = true;\r\n    //   }\r\n    // });\r\n    let updated = { ...user };\r\n    updated.subjects.splice(index, 1);\r\n    updateUser(updated);\r\n  }\r\n\r\n  const onSubjectAddGrade = async (us: IUserSubject) => {\r\n    setDisplayGradePrompt(true);\r\n    setCurrentSubject(us);\r\n  }\r\n\r\n  const onSubjectApply = async (subject: IUserSubject, index: number) => {\r\n    // let updated = Object.assign({}, this.state.user);\r\n    // updated.subjects[index] = subjectState;\r\n    if (!user) {\r\n      return;\r\n    }\r\n    try {\r\n      console.log(subject);\r\n\r\n      await FetchHelper.patchUserSubject(user.uid, index, subject);\r\n      updateUser(await FetchHelper.fetchUser(user.uid));\r\n    } catch (err) {\r\n      console.error(err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  const onSubjectAdd = async () => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n    const newSub: IUserSubject = {\r\n      name: 'Materia',\r\n      teacherName: 'Docente',\r\n      grades: []\r\n    }\r\n    try {\r\n      await FetchHelper.postUserSubject(user.uid, newSub);\r\n    } catch (err) {\r\n      return;\r\n    }\r\n    let updated = Object.assign({}, user);\r\n    updated.subjects.push(newSub);\r\n    updateUser(updated);\r\n  }\r\n\r\n  const onWelcomePromptAbort = async () => {\r\n    if (user) {\r\n      let updated = { ...user };\r\n      updated.hasReadWelcomeMsg = true;\r\n      updateUser(updated, false);\r\n    }\r\n    setDisplayMessage(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      let data: IUser;\r\n      let teachers: ITeacher[];\r\n      try {\r\n        if (props.uuid !== null) {\r\n          data = await FetchHelper.fetchUser(props.uuid);\r\n        } else {\r\n          data = await FetchHelper.fetchUser(-1);\r\n        }\r\n        teachers = await FetchHelper.fetchAllTeachers();\r\n      } catch {\r\n        setUnavailable(true);\r\n        setUser(null);\r\n        return;\r\n      }\r\n      setLoading(false);\r\n      setUser(data);\r\n      setSubjects(data.subjects);\r\n      setTeachersCache(teachers);\r\n      setDisplayMessage(!data.hasReadWelcomeMsg);\r\n    };\r\n    fetch();\r\n  }, [])\r\n\r\n  // useEffect(() => {\r\n  //   toasts.forEach((t, i) => {\r\n  //     if (t.time == 0) {\r\n  //       console.log('deleted');\r\n  //       let updated = [...toasts];\r\n  //       updated.splice(i, 1);\r\n  //       setToasts(updated);\r\n  //     }\r\n  //   });\r\n  // }, [toasts])\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setSubjects(user.subjects.filter(\r\n        v => v.name.toLowerCase().includes(query.toLowerCase())\r\n          || v.teacherName.toLowerCase().includes(query.toLowerCase())));\r\n    }\r\n  }, [query]);\r\n\r\n  // useEffect(() => {\r\n  //   if (user) {\r\n  //     setSubjects(user.subjects);\r\n  //   }\r\n  // }, [user?.subjects])\r\n\r\n  /* Works but not the best */\r\n  useEffect(() => {\r\n    if (user) {\r\n      setSubjects(user.subjects);\r\n    }\r\n  }, [user]);\r\n\r\n  if (loading || user == null) {\r\n    return (\r\n      <Page displayPrompt={false} user={null}>\r\n        <LoadingPage unavailable={unavailable} />\r\n      </Page>\r\n    );\r\n  }\r\n\r\n  let subjectPage;\r\n  if (currentSubject) {\r\n    // This variable is useless but typescript is dumb\r\n    // and for some reason cant assure that `currentSubject`\r\n    // will never be null. By doing this the error goes away.\r\n    subjectPage =\r\n      <SubjectPage\r\n        subject={currentSubject}\r\n        onAbort={() => setDisplayDetails(ps => !ps)}\r\n        onAddGrade={(v, w, d) => onGradePromptSubmit(v, w, d)}\r\n        onRemoveGrade={(g, i) => onSPRemoveGrade(g, i)}\r\n        onEditGrade={(g, i) => onSPEditGrade(g, user.subjects.indexOf(currentSubject), i)}\r\n      />;\r\n  }\r\n  let gradePrompt =\r\n    <GradePrompt\r\n      title={`${currentSubject?.name || ''}`}\r\n      onAbort={() => {\r\n        setDisplayGradePrompt(false);\r\n      }}\r\n      onSubmit={\r\n        (value, weight, date) => {\r\n          setDisplayGradePrompt(false);\r\n          onGradePromptSubmit(value, weight, date);\r\n        }\r\n      }\r\n    />;\r\n  let tib =\r\n    <TeacherInfobox\r\n      teachers={teachersCache}\r\n      onAbort={() => setDisplayTIB(ps => !ps)}\r\n      onTeacherClick={(t) => onTIBTeacherClick(t)}\r\n    />;\r\n  let activePrompt = undefined;\r\n  if (displayDetails) {\r\n    activePrompt = subjectPage;\r\n  } else if (displayGradePrompt) {\r\n    activePrompt = gradePrompt;\r\n  } else if (displayTIB) {\r\n    activePrompt = tib;\r\n  } else if (displayMessage) {\r\n    activePrompt = <WelcomePrompt onAbort={() => onWelcomePromptAbort()} />;\r\n  }\r\n\r\n  let totalAvg = GradeHelper.getTotalAvg(user.subjects);\r\n\r\n  return (\r\n    <Page\r\n      displayPrompt={dispPrompt}\r\n      user={user}\r\n      promptElement={activePrompt}\r\n      onListSubjectClick={(us) => onListSubjectClick(us)}>\r\n      <div className=\"hp-main-content\">\r\n        <div className=\"hp-content-page\">\r\n          <div className=\"hp-welcome-panel\">\r\n            <div className=\"hp-welcome-comp\">\r\n              <WelcomeComponent name={user.name} />\r\n            </div>\r\n            <div className=\"hp-total-avg-wrapper\">\r\n              <div className=\"hp-total-avg\">\r\n                <CircularFadeBorder fontSize=\"small\">\r\n                  <p>{(totalAvg == 0) ? '-' : GradeHelper.valueToString(totalAvg)}</p>\r\n                </CircularFadeBorder>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"hp-card hp-trend-panel hp-rise-opacity-in\">\r\n            <div className=\"hp-chart-wrapper\">\r\n              <div className=\"hp-chart\">\r\n                <AvgChart\r\n                  dataset={{\r\n                    label: 'Media',\r\n                    // backgroundColor: '#5900ff',\r\n                    backgroundColor: '#007eff',\r\n                    data: GradeHelper.getAllAvgs(user.subjects)\r\n                  }}\r\n                  labels={user.subjects.map(s => s.name)}\r\n                  shouldUpdate={shouldUpdateCharts}\r\n                  onUpdate={() => onChartUpdate()}\r\n                />\r\n              </div>\r\n              <div className=\"hp-chart\">\r\n                <TrendChart\r\n                  dataset={\r\n                    {\r\n                      label: 'Andamento',\r\n                      data: GradeHelper.getAllGradesValuesByDate(user.subjects)\r\n                    }}\r\n                  // labels={GradeHelper.getAllGradesByDateWithSubject(user.subjects).map(gwn => {\r\n                  //   return `${gwn.name} - ${GradeHelper.getDate(gwn.grade)}`\r\n                  // })}\r\n                  labels={GradeHelper.getAllGradesByDate(user.subjects).map(g => GradeHelper.getDate(g))}\r\n                  shouldUpdate={shouldUpdateCharts}\r\n                  onUpdate={() => onChartUpdate()}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"hp-search-bar\">\r\n            <SearchBar\r\n              onChange={text => setQuery(text)}\r\n              placeholder=\"Materia o docente\"\r\n            />\r\n          </div>\r\n          <div className=\"hp-subjects\">\r\n            {subjects.map((s: IUserSubject, i: number) => {\r\n              return <Subject\r\n                subject={s}\r\n                key={i}\r\n                onDelete={() => onSubjectDelete(i)}\r\n                onDetails={() => onListSubjectClick(s, i)}\r\n                onAddGrade={() => onSubjectAddGrade(s)}\r\n                onRemoveGrade={(g, gi) => onSubjectRemoveGrade(i, gi)}\r\n                onApply={state => onSubjectApply(state, i)}\r\n                onTIBDisplay={() => {\r\n                  setCurrentSubject(s);\r\n                  setDisplayTIB(ps => !ps)\r\n                }}\r\n              />\r\n            })}\r\n            <AddSubject onClick={() => onSubjectAdd()} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Page>\r\n  );\r\n}\r\nexport default HomePage;","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\AdminPage\\AdminPage.tsx",["207"],"import Auth from '../../auth/Auth';\r\nimport FetchHelper from '../../helpers/FetchHelper';\r\nimport HomePage from '../HomePage/HomePage';\r\nimport LoadingPage from '../LoadingPage/LoadingPage';\r\nimport Page from '../Page/Page';\r\nimport ParamSwitcher from './ParamSwitcher';\r\nimport React, { useEffect, useState } from 'react';\r\nimport WelcomeComponent from '../welcome-component/WelcomeComponent';\r\nimport { ITeacher, IUser, UserType } from '../../@types';\r\nimport { merge } from '../../helpers/ArrayHelper';\r\nimport './admin-page.css';\r\n\r\ninterface IAdminPageProps {\r\n    uuid: number | null;\r\n}\r\n\r\nconst AdminPage: React.FunctionComponent<IAdminPageProps> = (props) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [user, setUser] = useState<IUser | null>(null);\r\n    const [users, setUsers] = useState<(IUser | ITeacher)[]>([]);\r\n    const [filtered, setFiltered] = useState<(IUser | ITeacher)[]>([]);\r\n    const [showTeachers, setShowTeachers] = useState(false);\r\n    const [showStudents, setShowStudents] = useState(true);\r\n    const [showAdmins, setShowAdmins] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            try {\r\n                if (props.uuid !== null) {\r\n                    let user = await FetchHelper.fetchUser(props.uuid);\r\n                    let users = await FetchHelper.fetchAllUsers();\r\n                    let teachers = await FetchHelper.fetchAllTeachers();\r\n                    let withTeachers = merge<IUser, ITeacher>(users, teachers);\r\n                    setUser(() => user);\r\n                    setUsers(() => withTeachers);\r\n                    setLoading(() => false);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n        };\r\n        fetch();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let allowed: UserType[] = [];\r\n        if (showStudents) {\r\n            allowed.push(UserType.STUDENT);\r\n        }\r\n        if (showTeachers) {\r\n            allowed.push(UserType.TEACHER);\r\n        }\r\n        if (showAdmins) {\r\n            allowed.push(UserType.ADMIN);\r\n        }\r\n        setFiltered(users.filter(u => {\r\n            if ((u as IUser).type) {\r\n                return allowed.includes((u as IUser).type);\r\n            } else {\r\n                return allowed.includes(UserType.TEACHER);\r\n            }\r\n        }));\r\n    }, [showStudents, showTeachers, showAdmins, users]);\r\n\r\n    if (loading || !user || !users) {\r\n        return <Page\r\n            displayPrompt={false}\r\n            user={user}>\r\n            <LoadingPage />\r\n        </Page>\r\n    }\r\n\r\n    if (user.type !== UserType.ADMIN) {\r\n        Auth.setUserType(UserType.STUDENT);\r\n        return <HomePage uuid={props.uuid} />\r\n    }\r\n\r\n    return (\r\n        <Page\r\n            displayPrompt={false}\r\n            user={user}>\r\n            <div className=\"adp-main-content\">\r\n                <WelcomeComponent name={user.name} />\r\n                <div className=\"adp-params-wrapper\">\r\n                    <div className=\"adp-param-wrapper\">\r\n                        <ParamSwitcher label=\"Docenti\" defaultValue={showTeachers} onSwitch={() => setShowTeachers(ps => !ps)} />\r\n                    </div>\r\n                    <div className=\"adp-param-wrapper\">\r\n                        <ParamSwitcher label=\"Studenti\" defaultValue={showStudents} onSwitch={() => setShowStudents(ps => !ps)} />\r\n                    </div>\r\n                    <div className=\"adp-param-wrapper\">\r\n                        <ParamSwitcher label=\"Admins\" defaultValue={showAdmins} onSwitch={() => setShowAdmins(ps => !ps)} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"tp-table-wrapper\">\r\n                    <table className=\"tp-table\">\r\n                        <tr className=\"tp-tr\">\r\n                            <th className=\"tp-th\">Nome</th>\r\n                            <th className=\"tp-th\">Cognome</th>\r\n                            <th className=\"tp-th\">Tipo</th>\r\n                            <th className=\"tp-th\">ID</th>\r\n                            <th className=\"tp-th tp-th-op\">Operazioni</th>\r\n                        </tr>\r\n                        {filtered.map((s, i) => {\r\n                            return <tr className=\"tp-tr\" key={i}>\r\n                                <td className=\"tp-td\">{s.name}</td>\r\n                                <td className=\"tp-td\">{s.surname}</td>\r\n                                <td className=\"tp-td capitalize\">{((s as IUser).type) ? (s as IUser).type : UserType.TEACHER}</td>\r\n                                <td className=\"tp-td\">{s.uid}</td>\r\n                                <td className=\"tp-td tp-td-op\">x</td>\r\n                            </tr>;\r\n                        })}\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </Page>\r\n    );\r\n}\r\n\r\nexport default AdminPage;","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\@types\\index.ts",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\helpers\\FetchHelper.ts",["208"],"import _ENV from './../env.json';\r\nimport { API_URL } from '../util/constants';\r\nimport {\r\n    IError,\r\n    IGrade,\r\n    IGroup,\r\n    ITeacher,\r\n    IUser,\r\n    IUserSubject\r\n    } from '../@types';\r\n\r\ntype Methods = 'GET' | 'POST' | 'PATCH' | 'DELETE';\r\n\r\nexport default class FetchHelper {\r\n\r\n    private static URL = API_URL.substr(0, API_URL.length - 1);\r\n\r\n    public static async fetchGlobal(url: string, method: Methods = 'GET', body?: RequestInit, withToken?: boolean) {\r\n        let useToken = withToken === undefined ? false : withToken;\r\n        let res;\r\n        let opts: RequestInit = {\r\n            method: method\r\n        };\r\n        if (body) {\r\n            opts.body = JSON.stringify(body);\r\n            opts.headers = {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        if (useToken) {\r\n            if (_ENV.AUTH_TOKEN) {\r\n                // blocks code ????\r\n                // headers['authorization'] = _ENV.AUTH_TOKEN;\r\n                opts.headers = {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': _ENV.AUTH_TOKEN\r\n                };\r\n            } else {\r\n                console.error('No Auth token detected. Cannot fetch API!');\r\n            }\r\n        }\r\n        try {\r\n            res = await fetch(url, opts);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        let text = await res.text();\r\n        let data = (text) ? JSON.parse(text) : text;\r\n        if (data.error) {\r\n            console.error(data.error.message);\r\n            throw data;\r\n        }\r\n        if (text.toLowerCase() === 'unauthorized') {\r\n            console.error('Unauthorized');\r\n            let err: IError = {\r\n                error: {\r\n                    message: 'Unauthorized'\r\n                }\r\n            }\r\n            throw err;\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static async fetch(route: string, method: Methods = 'GET', body?: any) {\r\n        if (route.charAt(0) !== '/') {\r\n            let err: IError = {\r\n                error: {\r\n                    message: 'Invalid route. Must begin with /'\r\n                }\r\n            }\r\n            throw err;\r\n        }\r\n        route = route.replace(FetchHelper.URL, '');\r\n        const url = FetchHelper.URL + route;\r\n        try {\r\n            return await FetchHelper.fetchGlobal(url, method, body, true);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async login(username: string, password: string) {\r\n        try {\r\n            return await this.fetch('/authentication', 'POST', { username: username, password: password }) as IUser | null;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async fetchUser(uid: number) {\r\n        let user: IUser;\r\n        try {\r\n            user = await this.fetch(`/users/${uid}`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return user;\r\n    }\r\n\r\n    public static async fetchAllUsers() {\r\n        let users: IUser[];\r\n        try {\r\n            users = await this.fetch(`/users`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return users;\r\n    }\r\n\r\n    public static async fetchAllStudents() {\r\n        let students: IUser[];\r\n        try {\r\n            students = await this.fetch(`/students`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        // await this.delay(1000);\r\n        return students;\r\n    }\r\n\r\n    // private static async delay(time: number) {\r\n    //     return new Promise<void>((resolve, reject) => {\r\n    //         setTimeout(() => resolve(), time);\r\n    //     });\r\n    // }\r\n\r\n    public static async fetchTeacherStudents(teacher: ITeacher) {\r\n        try {\r\n            return (await this.fetchAllStudents()).filter(v => teacher.groupsIds.includes(v.groupId));\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async fetchGroupStudents(groupUid: number) {\r\n        try {\r\n            return (await this.fetchAllStudents()).filter(v => v.groupId === groupUid);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async fetchUserUid(username: string) {\r\n        let uid: number | null;\r\n        let names = username.split('.');\r\n        try {\r\n            uid = await this.fetch(`/useruids/${names[0]}/${names[1]}`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        if (uid) {\r\n            return uid;\r\n        }\r\n        return uid;\r\n    }\r\n\r\n    public static async fetchAllUserSubjetcs(uid: number) {\r\n        let user;\r\n        try {\r\n            user = await this.fetchUser(uid);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return user.subjects;\r\n    }\r\n\r\n    public static async fetchUserSubject(uuid: number, sIndex: number) {\r\n        let subject: IUserSubject;\r\n        try {\r\n            subject = await this.fetch(`/users/${uuid}/subjects/${sIndex}`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return subject;\r\n    }\r\n\r\n    public static async fetchAllSubjectGrades(uuid: number, sIndex: number) {\r\n        let grades: IGrade[];\r\n        try {\r\n            grades = await this.fetch(`/users/${uuid}/subjects/${sIndex}/grades`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return grades;\r\n    }\r\n\r\n    public static async fetchSubjectGrade(uuid: number, sIndex: number, gIndex: number) {\r\n        let grade: IGrade;\r\n        try {\r\n            grade = await this.fetch(`/users/${uuid}/subjects/${sIndex}/grades/${gIndex}`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return grade;\r\n    }\r\n\r\n    public static async fetchAllTeachers() {\r\n        let teachers: ITeacher[];\r\n        try {\r\n            teachers = await this.fetch(`/teachers`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return teachers;\r\n    }\r\n\r\n    public static async fetchTeacher(uid: number) {\r\n        let teacher: ITeacher;\r\n        try {\r\n            teacher = await this.fetch(`/teachers/${uid}`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return teacher;\r\n    }\r\n\r\n    public static async fetchGroup(uid: number) {\r\n        let group: IGroup;\r\n        try {\r\n            group = await this.fetch(`/groups/${uid}`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return group;\r\n    }\r\n\r\n    public static async fetchAllGroups() {\r\n        let groups: IGroup[];\r\n        try {\r\n            groups = await this.fetch(`/groups`);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return groups;\r\n    }\r\n\r\n    public static async fetchGroupsFor(teacherUid: number) {\r\n        let teacher;\r\n        try {\r\n            teacher = await this.fetchTeacher(teacherUid);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        if (!teacher) {\r\n            throw 'not a teacher';\r\n        }\r\n        let groups: IGroup[] = [];\r\n        for (let i = 0; i < teacher.groupsIds.length; i++) {\r\n            try {\r\n                groups.push(\r\n                    await this.fetchGroup(teacher.groupsIds[i])\r\n                );\r\n            } catch (err) {\r\n                throw err;\r\n            }\r\n        }\r\n        return groups;\r\n    }\r\n\r\n    public static async postUser(userData: Omit<IUser, 'uid'>) {\r\n        try {\r\n            await this.fetch(`/users`, 'POST', { user: userData });\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async postUserSubject(uuid: number, usData: IUserSubject) {\r\n        try {\r\n            await this.fetch(`/users/${uuid}/subjects`, 'POST', { subject: usData });\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async postSubjectGrade(uuid: number, sIndex: number, gradeData: IGrade) {\r\n        try {\r\n            await this.fetch(`/users/${uuid}/subjects/${sIndex}/grades`, 'POST', { grade: gradeData });\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async patchUser(uid: number, data: Partial<Omit<IUser, 'uid'>>) {\r\n        try {\r\n            await this.fetch(`/users/${uid}`, 'PATCH', { user: data });\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n        return;\r\n    }\r\n\r\n    public static async patchUserSubject(uuid: number, sIndex: number, data: Partial<IUserSubject>) {\r\n        try {\r\n            await this.fetch(`/users/${uuid}/subjects/${sIndex}`, 'PATCH', { subject: data });\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async patchSubjectGrade(uuid: number, sIndex: number, gIndex: number, data: IGrade) {\r\n        try {\r\n            await this.fetch(`/users/${uuid}/subjects/${sIndex}/grades/${gIndex}`, 'PATCH', { grade: data });\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async deleteUser(uid: number) {\r\n        try {\r\n            await this.fetch(`/users/${uid}`, 'DELETE');\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async deleteUserSubject(uuid: number, sIndex: number) {\r\n        try {\r\n            await this.fetch(`/users/${uuid}/subjects/${sIndex}`, 'DELETE');\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async deleteSubjectGrade(uuid: number, sIndex: number, gIndex: number) {\r\n        try {\r\n            await this.fetch(`/users/${uuid}/subjects/${sIndex}/grades/${gIndex}`, 'DELETE');\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\helpers\\ArrayHelper.ts",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\helpers\\GradeHelper.ts",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\text-input\\TextInput.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\author-box\\AuthorBox.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\gradient-button\\GradientButton.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\LoadingPage\\LoadingPage.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\welcome-component\\WelcomeComponent.tsx",["209","210","211","212"],"import FetchHelper from '../../helpers/FetchHelper';\r\nimport { useEffect, useState } from 'react';\r\nimport './welcome-component.css';\r\n\r\ntype Gender = 'male' | 'female' | null;\r\n\r\ntype GenderApiRes = {\r\n    name: string;\r\n    gender: Gender;\r\n    probability: number;\r\n    count: number;\r\n    country_id: string;\r\n}\r\n\r\ninterface IWelcomeComponentProps {\r\n    name: string;\r\n}\r\n\r\nconst WelcomeComponent: React.FunctionComponent<IWelcomeComponentProps> = (props) => {\r\n    // const [gender, setGender] = useState<Gender>(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            let res;\r\n            try {\r\n                //res = await FetchHelper.fetchGlobal(`https://api.genderize.io/?name=${props.name}&country_id=CH`);\r\n                // if (res) {\r\n                //     setGender(res.gender);\r\n                // } else {\r\n                //     setGender(null);\r\n                // }\r\n            } catch {\r\n                // setGender(null);\r\n            }\r\n            setLoading(false);\r\n        }\r\n        //fetch();\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    let date = new Date();\r\n    let isNight = date.getHours() > 17;\r\n\r\n    // let text = (!gender)\r\n    //     ? isNight ? 'Buonasera, ' : 'Buongiorno, '\r\n    //     : gender === 'male'\r\n    //         ? 'Benvenuto, '\r\n    //         : 'Benvenuta';\r\n\r\n    let text = isNight ? 'Buonasera, ' : 'Buongiorno, ';\r\n\r\n    if (loading) {\r\n        return <div className=\"wc-main-content wc-hidden\">\r\n            <h1 className=\"wc-welcome-text wc-hidden\">{text}<span className=\"capitalize\"></span></h1>\r\n            <div className=\"wc-welcome-separator\"></div>\r\n        </div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"wc-main-content\">\r\n            <h1 className=\"wc-welcome-text\">{text}<span className=\"capitalize\">{props.name}</span></h1>\r\n            <div className=\"wc-welcome-separator\"></div>\r\n        </div>\r\n    );\r\n}\r\nexport default WelcomeComponent;","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\slider\\Slider.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\Page\\Page.tsx",["213","214","215","216"],"import Nav from '../nav/Nav';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Toast from '../toast/Toast';\r\nimport { IUser, IUserSubject } from '../../@types';\r\nimport { ROUTES } from './../../util/constants';\r\nimport { toast } from 'react-toastify';\r\nimport './page.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\ninterface IPageProps {\r\n\r\n    user: IUser | null;\r\n\r\n    displayPrompt: boolean;\r\n\r\n    promptElement?: JSX.Element;\r\n\r\n    onListSubjectClick?: (us: IUserSubject, index: number) => void;\r\n}\r\n\r\nconst Page: React.FunctionComponent<IPageProps> = (props) => {\r\n    let prompt = (props.displayPrompt)\r\n        ? <div className=\"pa-prompt\">{props.promptElement}</div>\r\n        : null;\r\n    return (\r\n        <div className=\"pa-main-content\">\r\n            <Nav\r\n                routes={ROUTES}\r\n                entries={(props.user) ? props.user.subjects.map(s => s.name) : []}\r\n                onEntryClick={(i) => {\r\n                    if (props.onListSubjectClick && props.user) {\r\n                        props.onListSubjectClick(props.user.subjects[i], i);\r\n                    }\r\n                }}\r\n            />\r\n            <div className=\"pa-content-page\">\r\n                {props.children}\r\n            </div>\r\n            { props.displayPrompt && props.promptElement ? <div className=\"pa-prompt-overlay\"></div> : null}\r\n            {prompt}\r\n        </div>\r\n    );\r\n}\r\nexport default Page;\r\n","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\AdminPage\\ParamSwitcher.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\avg-chart\\AvgChart.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\grade-prompt\\GradePrompt.tsx",["217"],"import SimpleTextInput from '../simple-text-input/SimpleTextInput';\r\nimport { useEffect, useState } from 'react';\r\nimport './grade-prompt.css';\r\n\r\ninterface IGradePromptProps {\r\n\r\n    onSubmit: (value: number, weight: number, date: Date) => void;\r\n\r\n    onAbort: () => void;\r\n\r\n    title: string;\r\n\r\n    value?: number;\r\n\r\n    weight?: number;\r\n\r\n    date?: Date;\r\n}\r\n\r\nconst GradePrompt: React.FunctionComponent<IGradePromptProps> = (props) => {\r\n    const [value, setValue] = useState<number>(props.value ? props.value : 4.5);\r\n    const [weight, setWeight] = useState<number>(props.weight ? props.weight : 1);\r\n    const [date, setDate] = useState<Date>(props.date ? props.date : new Date());\r\n\r\n    const reset = () => {\r\n        setValue(4.5);\r\n        setWeight(1);\r\n        setDate(new Date());\r\n    }\r\n\r\n    const onChangeGrade = (value: number) => {\r\n        setValue(Math.min(6, Math.max(1, value)));\r\n    }\r\n\r\n    const onChangeWeight = (value: number) => {\r\n        setWeight(value);\r\n    }\r\n\r\n    const onChangeDate = (value: Date) => {\r\n        setDate(value);\r\n    }\r\n\r\n    const onAbort = () => {\r\n        reset();\r\n        props.onAbort();\r\n    }\r\n\r\n    const onSubmit = (value: number, weight: number, date: Date) => {\r\n        reset();\r\n        props.onSubmit(value, weight, date);\r\n    }\r\n\r\n    let okBtnCName;\r\n    if (!date || !value || !weight) {\r\n        okBtnCName = 'gp-disabled';\r\n    }\r\n    return (\r\n        <div className=\"gp-main\">\r\n            <div className=\"gp-content\">\r\n                <h1 className=\"gp-title\">{props.title}</h1>\r\n                <div className=\"gp-abort noselect\" onClick={() => onAbort()}></div>\r\n                <div className=\"gp-inputs\">\r\n                    <div className=\"gp-input\">\r\n                        <SimpleTextInput\r\n                            value={value}\r\n                            forceType=\"number\"\r\n                            placeHolder=\"Nota\"\r\n                            toolTipText=\"La nota del test\"\r\n                            min={1}\r\n                            max={6}\r\n                            step={0.25}\r\n                            onChange={(v) => onChangeGrade(v as number)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"gp-input\">\r\n                        <SimpleTextInput\r\n                            value={weight}\r\n                            forceType=\"number\"\r\n                            placeHolder=\"Peso\"\r\n                            toolTipText=\"Il peso della nota\"\r\n                            min={0}\r\n                            step={0.1}\r\n                            onChange={(v) => onChangeWeight(v as number)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"gp-input\">\r\n                        <SimpleTextInput\r\n                            value={date}\r\n                            forceType=\"date\"\r\n                            placeHolder=\"Data\"\r\n                            toolTipText=\"La data di consegna\"\r\n                            onChange={(v) => onChangeDate(v as Date)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={`gp-ok-btn ${okBtnCName} noselect`} onClick={() => {\r\n                    onSubmit(\r\n                        value as number,\r\n                        weight as number,\r\n                        date as Date\r\n                    );\r\n                }}>OK</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default GradePrompt;\r\n","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\add-subject\\AddSubject.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\circular-fade-border\\CircularFadeBorder.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\search-bar\\SearchBar.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\teacher-infobox\\TeacherInfobox.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\trend-chart\\TrendChart.tsx",["218","219","220","221"],"import * as ObjectHelper from './../../helpers/ObjectHelper';\r\nimport AbstractChart, { IAbstractChartProps } from '../chart/AbstractChart';\r\nimport React, { Component, ReactNode } from 'react';\r\nimport { Chart } from 'chart.js';\r\n\r\nconst TrendChart: React.FunctionComponent<IAbstractChartProps> = (props) => {\r\n    return <AbstractChart\r\n        dataset={props.dataset}\r\n        labels={props.labels}\r\n        type=\"line\"\r\n        options={{\r\n            responsive: true,\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            min: 1,\r\n                            max: 6\r\n                        }\r\n                    }\r\n                ],\r\n                unitStepSize: 0.25\r\n            },\r\n            maintainAspectRatio: false,\r\n        }}\r\n        shouldUpdate={props.shouldUpdate}\r\n        onUpdate={() => {\r\n            if (props.onUpdate) {\r\n                props.onUpdate();\r\n            }\r\n        }}\r\n    />\r\n}\r\n\r\nexport default TrendChart;","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\subject\\Subject.tsx",["222","223","224","225","226","227"],"import CircularFadeBorder from '../circular-fade-border/CircularFadeBorder';\r\nimport FetchHelper from '../../helpers/FetchHelper';\r\nimport Grade from './Grade';\r\nimport GradeHelper from '../../helpers/GradeHelper';\r\nimport { IGrade, ITeacher, IUserSubject } from '../../@types';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport './Subject.css';\r\n\r\ninterface ISubjectProps {\r\n\r\n    subject: IUserSubject;\r\n\r\n    onDelete: () => void;\r\n\r\n    onAddGrade: () => void;\r\n\r\n    onDetails: () => void;\r\n\r\n    onRemoveGrade: (grade: IGrade, index: number) => void;\r\n\r\n    onApply: (state: IUserSubject) => void;\r\n\r\n    onTIBDisplay: () => void;\r\n}\r\n\r\nconst Subject: React.FunctionComponent<ISubjectProps> = (props) => {\r\n    const [name, setName] = useState<string>(props.subject.name);\r\n    const [teacherName, setTeacherName] = useState<string>('');\r\n    const [avg, setAvg] = useState<number>(1);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            await setUp();\r\n        }\r\n        fetch();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setAvg(getAvg());\r\n    }, [getSubjectAvg(props.subject)])\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            await setUp();\r\n        }\r\n        fetch();\r\n    }, [props.subject.teacherName]);\r\n\r\n    useEffect(() => {\r\n        if (!isEditing) {\r\n            setName(props.subject.name);\r\n        }\r\n    }, [name, props.subject.name, isEditing])\r\n\r\n    const getAvg = (): number => {\r\n        return getSubjectAvg(props.subject);\r\n    }\r\n\r\n    const setUp = async () => {\r\n        let teacher: ITeacher | null = null;\r\n        try {\r\n            if (props.subject.teacherId !== undefined) {\r\n                teacher = await FetchHelper.fetchTeacher(props.subject.teacherId);\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n            return;\r\n        }\r\n        if (teacher) {\r\n            setTeacherName(`${teacher.surname} ${teacher.name}`);\r\n        } else {\r\n            setTeacherName(props.subject.teacherName);\r\n        }\r\n        setAvg(getAvg());\r\n    }\r\n\r\n    const onApply = async () => {\r\n        // SE IL NOME E\" REGISTRATO NON ACCETTERA\" PIU\" NUOVI NOMI\r\n        let _name = name;\r\n        let teacher = teacherName;\r\n        let hasCustom = false;\r\n        if (name.trim() === '') {\r\n            _name = 'Materia';\r\n        }\r\n        let teachers;\r\n        try {\r\n            teachers = await FetchHelper.fetchAllTeachers();\r\n        } catch (err) {\r\n            console.error(err);\r\n            return;\r\n        }\r\n        let t = teachers.filter(t => {\r\n            return `${t.surname} ${t.name}` === teacher\r\n                || `${t.name} ${t.surname}` === teacher;\r\n        });\r\n        if (t.length >= 1) {\r\n            teacher = `${t[0].surname} ${t[0].name}`;\r\n            hasCustom = false;\r\n        } else {\r\n            hasCustom = true;\r\n        }\r\n        if (teacherName.trim() === '') {\r\n            teacher = '?';\r\n            hasCustom = true;\r\n        }\r\n        setIsEditing(false);\r\n        setName(_name);\r\n        setTeacherName(teacher);\r\n        let subject = props.subject;\r\n        subject.name = name;\r\n        subject.teacherName = teacher;\r\n        if (hasCustom) {\r\n            delete subject.teacherId;\r\n        }\r\n        props.onApply(subject);\r\n    }\r\n\r\n    let sData;\r\n    // let customTeacher = (!hasCustomTeacher)\r\n    //     ? ''\r\n    // : <div\r\n    //     className=\"s-subject-teacher-warning noselect\"\r\n    //     onClick={() => props.onTIBDisplay()}\r\n    // ></div>;\r\n    let customTeacher = !isEditing\r\n        ? <div\r\n            className=\"s-subject-teacher-warning noselect\"\r\n            onClick={() => props.onTIBDisplay()}\r\n        ></div>\r\n        : null;\r\n    if (props.subject.grades.length !== 0) {\r\n        sData = <div className=\"s-subject-data\">\r\n            <div className=\"s-subject-grades\">\r\n                {props.subject.grades.map((g, i) => {\r\n                    return <div className=\"s-subject-grade-wrapper\" key={i}>\r\n                        <div className=\"s-subject-grade-delete noselect\" onClick={() => props.onRemoveGrade(g, i)}></div>\r\n                        <Grade key={i} gradeObj={g} editable={false} />\r\n                    </div>;\r\n                })}\r\n            </div>\r\n            <CircularFadeBorder>\r\n                <p className={avg < 4 ? 'red-text' : ''}>\r\n                    {avg.toFixed(1)}\r\n                </p>\r\n            </CircularFadeBorder>\r\n        </div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"hp-card s-subject\" >\r\n            <div className=\"s-drag-handle-wrapper\">\r\n                <div className=\"s-drag-handle\"\r\n                    draggable=\"true\"></div>\r\n            </div>\r\n            <div className=\"s-subject-top\">\r\n                <input\r\n                    type=\"text\"\r\n                    className={`editable-p s-subject-title ${(isEditing) ? 's-input-editing' : ''}`}\r\n                    value={name}\r\n                    disabled={!isEditing}\r\n                    onChange={e => setName(e.target.value)}\r\n                />\r\n                <div className=\"s-subject-teacher-wrapper\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className={`editable-p s-subject-teacher ${(isEditing) ? 's-input-editing' : ''}`}\r\n                        value={teacherName}\r\n                        disabled={!isEditing}\r\n                        onChange={e => setTeacherName(e.target.value)}\r\n                    />\r\n                    {customTeacher}\r\n                </div>\r\n                <div className=\"s-edit-btn-wrapper\">\r\n                    <div className=\"s-edit-btn noselect\"> </div>\r\n                    <div className=\"s-edit-btn-content\">\r\n                        <div className=\"s-edit-btn-el s-edit-btn-el-edit noselect\" onClick={() => setIsEditing(true)}> </div>\r\n                        <div className=\"s-edit-btn-el s-edit-btn-el-details noselect\" onClick={() => props.onDetails()}> </div>\r\n                        <div className=\"s-edit-btn-el s-edit-btn-el-trash noselect\" onClick={() => props.onDelete()}></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"s-subject-separator\"></div>\r\n            { sData}\r\n            <div className={`${isEditing ? 's-subject-apply-wrapper noselect' : 's-subject-add-grade-wrapper noselect'}`}>\r\n                <div\r\n                    className={`${isEditing ? 's-subject-apply noselect' : 's-subject-add-grade noselect'}`}\r\n                    onClick={() => {\r\n                        if (isEditing) {\r\n                            onApply();\r\n                        } else {\r\n                            props.onAddGrade();\r\n                        }\r\n                    }}\r\n                >+</div>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Subject;\r\n\r\nexport const getSubjectAvg = (subject: IUserSubject): number => {\r\n    if (subject.grades.length == 0) {\r\n        return 0;\r\n    }\r\n    let sum = subject.grades.map(g => g.value * g.weight).reduce((p, c) => p + c);\r\n    let weightSum = subject.grades.map(g => g.weight).reduce((p, c) => p + c);\r\n    return sum / Math.max(1, weightSum);\r\n}\r\n","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\SubjectPage\\SubjectPage.tsx",["228","229","230","231","232","233","234"],"import AddGradeButton from '../add-grade-btn/AddGradeButton';\r\nimport CircularFadeBorder from '../circular-fade-border/CircularFadeBorder';\r\nimport FetchHelper from '../../helpers/FetchHelper';\r\nimport GradeHelper from '../../helpers/GradeHelper';\r\nimport GradeOptions from '../grade-options/GradeOptions';\r\nimport GradePrompt from '../grade-prompt/GradePrompt';\r\nimport React, { useEffect } from 'react';\r\nimport Subject, { getSubjectAvg } from '../subject/Subject';\r\nimport { IGrade, ITeacher, IUserSubject } from '../../@types';\r\nimport { useState } from 'react';\r\nimport './subject-page.css';\r\n\r\n\r\ninterface ISubjectPageProps {\r\n\r\n    subject: IUserSubject;\r\n\r\n    onAbort: () => void;\r\n\r\n    onAddGrade: (value: number, weight: number, date: Date) => void;\r\n\r\n    onEditGrade?: (grade: IGrade, index: number) => void;\r\n\r\n    onRemoveGrade?: (grade: IGrade, index: number) => void;\r\n}\r\n\r\nconst SubjectPage: React.FunctionComponent<ISubjectPageProps> = (props) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [teacher, setTeacher] = useState<ITeacher | null>(null);\r\n    const [teacherFullname, setTeacherFullname] = useState<string | null>(null);\r\n    const [displayPrompt, setDisplayPrompt] = useState(false);\r\n    const [prompt, setPrompt] = useState<JSX.Element>();\r\n\r\n    const setUp = async () => {\r\n        if (props.subject.teacherId) {\r\n            let tt: ITeacher;\r\n            try {\r\n                tt = await FetchHelper.fetchTeacher(props.subject.teacherId);\r\n            } catch (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            setLoading(false);\r\n            setTeacher(tt);\r\n            setTeacherFullname(`${tt.surname} ${tt.name}`);\r\n            return;\r\n        }\r\n        setLoading(false);\r\n        setTeacherFullname(props.subject.teacherName);\r\n    }\r\n\r\n    const getColorClassName = (value: number): string => {\r\n        if (value < 3.5) {\r\n            return 'orange-text'; // red\r\n        } else if (value < 4 && value >= 3.5) {\r\n            return 'orange-text';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            await setUp();\r\n        }\r\n        fetch();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            await setUp();\r\n        }\r\n        fetch();\r\n    }, [props.subject]);\r\n\r\n    if (loading || !props.subject || (!teacher && !teacherFullname)) {\r\n        return <h1>loading</h1>\r\n    }\r\n    let grades = props.subject.grades;\r\n    let avg = getSubjectAvg(props.subject);\r\n    let testPlural = (grades.length > 1) ? 'he' : 'a';\r\n    let gradePrompt = (displayPrompt)\r\n        ? <div className=\"pa-prompt\" >{prompt}</div>\r\n        : null;\r\n    return (\r\n        <div className=\"sp-main-content\">\r\n            <div className=\"sp-abort noselect\" onClick={() => props.onAbort()}></div>\r\n            <div className=\"sp-top\">\r\n                <div className=\"sp-top-top\">\r\n                    <div className=\"sp-avg-wrapper\">\r\n                        <CircularFadeBorder>\r\n                            <p className={avg < 4 ? 'orange-text' : ''}>\r\n                                {(grades.length == 0) ? '' : avg.toFixed(1)}\r\n                            </p>\r\n                        </CircularFadeBorder>\r\n                    </div>\r\n                    <div className=\"sp-subject-details\">\r\n                        <div className=\"sp-details-header\">{props.subject.name}</div>\r\n                        <div className=\"sp-details-teacher\">{teacherFullname}</div>\r\n                        <div className=\"sp-details-data\">\r\n                            <div className=\"sp-details-tests\">\r\n                                <p><span>{grades.length}</span> verific{testPlural}</p>\r\n                            </div>\r\n                            <div className=\"sp-details-avg\">\r\n                                <p>Avg: <span className={(grades.length > 0) ? 'sp-details-avg-number' : ''}>{(grades.length == 0) ? '-' : avg.toFixed(2)}</span></p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"sp-bottom\">\r\n                <div className=\"sp-grades-table\">\r\n                    <table>\r\n                        <tr className=\"sp-thead\">\r\n                            <th className=\"sp-th\"><p>Grade</p></th>\r\n                            <th className=\"sp-th\"><p>Date</p></th>\r\n                            <th className=\"sp-th\"><p>Weight</p></th>\r\n                            <th className=\"sp-th\"><p>Options</p></th>\r\n                        </tr>\r\n                        {props.subject.grades.map((g, i) => {\r\n                            return <tr className=\"sp-tr\" key={i}>\r\n                                <td className={`sp-td sp-grade ${getColorClassName(g.value)}`}>{GradeHelper.valueToString(g)}</td>\r\n                                <td className=\"sp-td\">{GradeHelper.getDate(g)}</td>\r\n                                <td className=\"sp-td\">{g.weight.toFixed(1)}</td>\r\n                                <td className=\"sp-td sp-options\">\r\n                                    <div className=\"sp-options-wrapper\">\r\n                                        <GradeOptions\r\n                                            onOptionClick={oi => {\r\n                                                if (oi == 0) {\r\n                                                    setPrompt(<GradePrompt\r\n                                                        title={`Modifica: ${props.subject.name}`}\r\n                                                        onAbort={() => {\r\n                                                            setDisplayPrompt(false);\r\n                                                        }}\r\n                                                        onSubmit={(v, w, d) => {\r\n                                                            setDisplayPrompt(false);\r\n                                                            let newGrade: IGrade = {\r\n                                                                value: v,\r\n                                                                weight: w,\r\n                                                                date: d.toISOString()\r\n                                                            }\r\n                                                            return props.onEditGrade ? props.onEditGrade(newGrade, i) : null;\r\n                                                        }}\r\n                                                        value={g.value}\r\n                                                        weight={g.weight}\r\n                                                        date={new Date(g.date)}\r\n                                                    />);\r\n                                                    setDisplayPrompt(ps => !ps);\r\n                                                } else if (oi == 1) {\r\n                                                    return props.onRemoveGrade ? props.onRemoveGrade(g, i) : null;\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </td>\r\n                            </tr>;\r\n                        })}\r\n                    </table>\r\n                </div>\r\n                <div className=\"sp-add-grade-wrapper\">\r\n                    <AddGradeButton onClick={() => {\r\n                        setPrompt(<GradePrompt\r\n                            title={`${props.subject.name}`}\r\n                            onAbort={() => {\r\n                                setDisplayPrompt(false);\r\n                            }}\r\n                            onSubmit={\r\n                                (value, weight, date) => {\r\n                                    setDisplayPrompt(false);\r\n                                    props.onAddGrade(value, weight, date);\r\n                                }\r\n                            }\r\n                        />);\r\n                        setDisplayPrompt(ps => !ps);\r\n                    }} />\r\n                </div>\r\n            </div>\r\n            { displayPrompt ? <div className=\"pa-prompt-overlay\"></div> : null}\r\n            {gradePrompt}\r\n        </div >\r\n    );\r\n}\r\nexport default SubjectPage;\r\n","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\welcome-prompt\\WelcomePrompt.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\helpers\\ObjectHelper.ts",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\nav\\Nav.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\chart\\AbstractChart.tsx",["235"],"import Chart from 'chart.js';\r\nimport React, { Component, ReactNode } from 'react';\r\nimport './abstract-chart.css';\r\n\r\nexport type AbstractChartDataSet = {\r\n\r\n    label: string;\r\n\r\n    data: number[];\r\n\r\n    backgroundColor?: string | CanvasGradient;\r\n};\r\n\r\nexport interface IAbstractChartProps {\r\n\r\n    type?: 'bar' | 'line';\r\n\r\n    labels: string[];\r\n\r\n    dataset: AbstractChartDataSet;\r\n\r\n    options?: Chart.ChartOptions;\r\n\r\n    shouldUpdate?: boolean;\r\n\r\n    onUpdate?: () => void;\r\n}\r\n\r\nclass AbstractChart extends Component<IAbstractChartProps> {\r\n\r\n    private chartRef: any;\r\n\r\n    private chart: Chart | null;\r\n\r\n    constructor(props: IAbstractChartProps) {\r\n        super(props);\r\n        this.chartRef = React.createRef();\r\n        this.chart = null;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.shouldUpdate) {\r\n            if (this.chart) {\r\n                this.chart.destroy();\r\n            }\r\n            this.chart = this.buildChart();\r\n            if (this.props.onUpdate) {\r\n                this.props.onUpdate();\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.chart = this.buildChart();\r\n    }\r\n\r\n    private buildChart() {\r\n        if (this.props.type == 'line') {\r\n            // hard coded trash \r\n            let ctx: CanvasRenderingContext2D = this.chartRef.current.getContext('2d');\r\n            let gradient = ctx.createLinearGradient(0, 0, 0, 310);\r\n            gradient.addColorStop(0.3, '#007eff');\r\n            gradient.addColorStop(1, '#007eff00');\r\n            this.props.dataset.backgroundColor = gradient;\r\n        }\r\n        return new Chart(this.chartRef.current, {\r\n            type: this.props.type || 'bar',\r\n            data: {\r\n                labels: this.props.labels,\r\n                datasets: [this.props.dataset]\r\n            },\r\n            options: this.props.options\r\n        });\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return (\r\n            <canvas ref={this.chartRef} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbstractChart;\r\n","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\subject\\Grade.tsx",["236"],"import GradeHelper from '../../helpers/GradeHelper';\r\nimport { IGrade } from '../../@types';\r\n\r\ninterface IGradeProps {\r\n\r\n    gradeObj: IGrade;\r\n\r\n    editable?: boolean;\r\n}\r\n\r\nconst Grade: React.FunctionComponent<IGradeProps> = (props: IGradeProps) => {\r\n    return (\r\n        <input\r\n            type=\"number\"\r\n            min=\"1\"\r\n            max=\"6\"\r\n            value={props.gradeObj.value.toFixed(1)}\r\n            disabled={!props.editable}\r\n            step=\"0.25\"\r\n            className={`editable-p s-subject-grade`}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Grade;","F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\simple-text-input\\SimpleTextInput.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\add-grade-btn\\AddGradeButton.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\grade-options\\GradeOptions.tsx",[],"F:\\SAMT\\Moduli\\306\\prjs\\NoteScolastiche\\gradesmanager\\src\\components\\prompt\\Prompt.tsx",[],{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":10,"column":3,"nodeType":"243","messageId":"244","endLine":10,"endColumn":14},{"ruleId":"241","severity":1,"message":"245","line":12,"column":3,"nodeType":"243","messageId":"244","endLine":12,"endColumn":17},{"ruleId":"246","severity":1,"message":"247","line":21,"column":3,"nodeType":"248","messageId":"249","endLine":23,"endColumn":4},{"ruleId":"250","severity":1,"message":"251","line":39,"column":38,"nodeType":"252","messageId":"253","endLine":39,"endColumn":40},{"ruleId":"250","severity":1,"message":"251","line":41,"column":45,"nodeType":"252","messageId":"253","endLine":41,"endColumn":47},{"ruleId":"250","severity":1,"message":"251","line":43,"column":45,"nodeType":"252","messageId":"253","endLine":43,"endColumn":47},{"ruleId":"241","severity":1,"message":"254","line":3,"column":10,"nodeType":"243","messageId":"244","endLine":3,"endColumn":16},{"ruleId":"250","severity":1,"message":"251","line":40,"column":50,"nodeType":"252","messageId":"253","endLine":40,"endColumn":52},{"ruleId":"255","severity":1,"message":"256","line":132,"column":8,"nodeType":"257","endLine":132,"endColumn":10,"suggestions":"258"},{"ruleId":"241","severity":1,"message":"259","line":3,"column":8,"nodeType":"243","messageId":"244","endLine":3,"endColumn":19},{"ruleId":"250","severity":1,"message":"251","line":59,"column":13,"nodeType":"252","messageId":"253","endLine":59,"endColumn":15},{"ruleId":"255","severity":1,"message":"260","line":45,"column":6,"nodeType":"257","endLine":45,"endColumn":8,"suggestions":"261"},{"ruleId":"255","severity":1,"message":"262","line":81,"column":6,"nodeType":"257","endLine":81,"endColumn":12,"suggestions":"263"},{"ruleId":"255","severity":1,"message":"264","line":94,"column":6,"nodeType":"257","endLine":94,"endColumn":16,"suggestions":"265"},{"ruleId":"241","severity":1,"message":"266","line":9,"column":8,"nodeType":"243","messageId":"244","endLine":9,"endColumn":14},{"ruleId":"241","severity":1,"message":"267","line":24,"column":10,"nodeType":"243","messageId":"244","endLine":24,"endColumn":15},{"ruleId":"241","severity":1,"message":"268","line":35,"column":5,"nodeType":"243","messageId":"244","endLine":35,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":111,"column":44,"nodeType":"252","messageId":"253","endLine":111,"endColumn":46},{"ruleId":"250","severity":1,"message":"251","line":111,"column":60,"nodeType":"252","messageId":"253","endLine":111,"endColumn":62},{"ruleId":"255","severity":1,"message":"269","line":251,"column":6,"nodeType":"257","endLine":251,"endColumn":8,"suggestions":"270"},{"ruleId":"255","severity":1,"message":"271","line":270,"column":6,"nodeType":"257","endLine":270,"endColumn":13,"suggestions":"272"},{"ruleId":"250","severity":1,"message":"251","line":354,"column":33,"nodeType":"252","messageId":"253","endLine":354,"endColumn":35},{"ruleId":"255","severity":1,"message":"269","line":44,"column":8,"nodeType":"257","endLine":44,"endColumn":10,"suggestions":"273"},{"ruleId":"274","severity":1,"message":"275","line":246,"column":13,"nodeType":"276","messageId":"277","endLine":246,"endColumn":35},{"ruleId":"241","severity":1,"message":"278","line":1,"column":8,"nodeType":"243","messageId":"244","endLine":1,"endColumn":19},{"ruleId":"241","severity":1,"message":"279","line":7,"column":6,"nodeType":"243","messageId":"244","endLine":7,"endColumn":18},{"ruleId":"241","severity":1,"message":"280","line":24,"column":15,"nodeType":"243","messageId":"244","endLine":24,"endColumn":20},{"ruleId":"241","severity":1,"message":"281","line":25,"column":17,"nodeType":"243","messageId":"244","endLine":25,"endColumn":20},{"ruleId":"241","severity":1,"message":"282","line":2,"column":17,"nodeType":"243","messageId":"244","endLine":2,"endColumn":26},{"ruleId":"241","severity":1,"message":"283","line":2,"column":28,"nodeType":"243","messageId":"244","endLine":2,"endColumn":36},{"ruleId":"241","severity":1,"message":"284","line":3,"column":8,"nodeType":"243","messageId":"244","endLine":3,"endColumn":13},{"ruleId":"241","severity":1,"message":"267","line":6,"column":10,"nodeType":"243","messageId":"244","endLine":6,"endColumn":15},{"ruleId":"241","severity":1,"message":"282","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":19},{"ruleId":"241","severity":1,"message":"285","line":1,"column":13,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"286","line":3,"column":17,"nodeType":"243","messageId":"244","endLine":3,"endColumn":26},{"ruleId":"241","severity":1,"message":"287","line":3,"column":28,"nodeType":"243","messageId":"244","endLine":3,"endColumn":37},{"ruleId":"241","severity":1,"message":"288","line":4,"column":10,"nodeType":"243","messageId":"244","endLine":4,"endColumn":15},{"ruleId":"241","severity":1,"message":"289","line":4,"column":8,"nodeType":"243","messageId":"244","endLine":4,"endColumn":19},{"ruleId":"255","severity":1,"message":"290","line":38,"column":8,"nodeType":"257","endLine":38,"endColumn":10,"suggestions":"291"},{"ruleId":"255","severity":1,"message":"292","line":42,"column":8,"nodeType":"257","endLine":42,"endColumn":38,"suggestions":"293"},{"ruleId":"255","severity":1,"message":"294","line":42,"column":9,"nodeType":"295","endLine":42,"endColumn":37},{"ruleId":"255","severity":1,"message":"290","line":49,"column":8,"nodeType":"257","endLine":49,"endColumn":35,"suggestions":"296"},{"ruleId":"250","severity":1,"message":"251","line":205,"column":31,"nodeType":"252","messageId":"253","endLine":205,"endColumn":33},{"ruleId":"241","severity":1,"message":"297","line":8,"column":8,"nodeType":"243","messageId":"244","endLine":8,"endColumn":15},{"ruleId":"255","severity":1,"message":"290","line":66,"column":8,"nodeType":"257","endLine":66,"endColumn":10,"suggestions":"298"},{"ruleId":"255","severity":1,"message":"290","line":73,"column":8,"nodeType":"257","endLine":73,"endColumn":23,"suggestions":"299"},{"ruleId":"250","severity":1,"message":"251","line":92,"column":49,"nodeType":"252","messageId":"253","endLine":92,"endColumn":51},{"ruleId":"250","severity":1,"message":"251","line":104,"column":126,"nodeType":"252","messageId":"253","endLine":104,"endColumn":128},{"ruleId":"250","severity":1,"message":"251","line":128,"column":56,"nodeType":"252","messageId":"253","endLine":128,"endColumn":58},{"ruleId":"250","severity":1,"message":"251","line":148,"column":63,"nodeType":"252","messageId":"253","endLine":148,"endColumn":65},{"ruleId":"250","severity":1,"message":"251","line":58,"column":29,"nodeType":"252","messageId":"253","endLine":58,"endColumn":31},{"ruleId":"241","severity":1,"message":"289","line":1,"column":8,"nodeType":"243","messageId":"244","endLine":1,"endColumn":19},"no-native-reassign",["300"],"no-negated-in-lhs",["301"],"@typescript-eslint/no-unused-vars","'ADMIN_ROUTE' is defined but never used.","Identifier","unusedVar","'TEACHERS_ROUTE' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'IError' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'panels' and 'props.uuid'. Either include them or remove the dependency array. You can also do a functional update 'setPanels(p => ...)' if you only need 'panels' in the 'setPanels' call.","ArrayExpression",["302"],"'LoadingPage' is defined but never used.","React Hook useEffect has a missing dependency: 'props.tuid'. Either include it or remove the dependency array.",["303"],"React Hook useEffect has a missing dependency: 'teacher'. Either include it or remove the dependency array.",["304"],"React Hook useEffect has a missing dependency: 'mode'. Either include it or remove the dependency array.",["305"],"'Prompt' is defined but never used.","'toast' is defined but never used.","'deleteLastUS' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.uuid'. Either include it or remove the dependency array.",["306"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["307"],["308"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'FetchHelper' is defined but never used.","'GenderApiRes' is defined but never used.","'fetch' is assigned a value but never used.","'res' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Toast' is defined but never used.","'ObjectHelper' is defined but never used.","'Component' is defined but never used.","'ReactNode' is defined but never used.","'Chart' is defined but never used.","'GradeHelper' is defined but never used.","React Hook useEffect has a missing dependency: 'setUp'. Either include it or remove the dependency array.",["309"],"React Hook useEffect has a missing dependency: 'getAvg'. Either include it or remove the dependency array.",["310"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["311"],"'Subject' is defined but never used.",["312"],["313"],"no-global-assign","no-unsafe-negation",{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"322","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"327","fix":"333"},{"desc":"334","fix":"335"},"Update the dependencies array to be: [panels, props.uuid]",{"range":"336","text":"337"},"Update the dependencies array to be: [props.tuid]",{"range":"338","text":"339"},"Update the dependencies array to be: [mode, teacher]",{"range":"340","text":"341"},"Update the dependencies array to be: [mode, students]",{"range":"342","text":"343"},"Update the dependencies array to be: [props.uuid]",{"range":"344","text":"345"},"Update the dependencies array to be: [query, user]",{"range":"346","text":"347"},{"range":"348","text":"345"},"Update the dependencies array to be: [setUp]",{"range":"349","text":"350"},"Update the dependencies array to be: [getAvg]",{"range":"351","text":"352"},"Update the dependencies array to be: [props.subject.teacherName, setUp]",{"range":"353","text":"354"},{"range":"355","text":"350"},"Update the dependencies array to be: [props.subject, setUp]",{"range":"356","text":"357"},[4463,4465],"[panels, props.uuid]",[1428,1430],"[props.tuid]",[2241,2247],"[mode, teacher]",[2577,2587],"[mode, students]",[7771,7773],"[props.uuid]",[8283,8290],"[query, user]",[1824,1826],[1104,1106],"[setUp]",[1169,1199],"[getAvg]",[1328,1355],"[props.subject.teacherName, setUp]",[2228,2230],[2360,2375],"[props.subject, setUp]"]